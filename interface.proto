package bc.protocol;

message block_header {
    // protocol version
    required uint32 version = 1;
    
    // 32-byte previous block hash
    required bytes previous_block_hash = 2;
    
    // 32-byte transactions hash
    required bytes merkle_root = 3;
    
    // creation
    required uint32 timestamp = 4;
    
    // difficulty
    required uint32 bits = 5;
    
    required uint32 nonce = 6;
    
    // variable length integer in protocol, not involved in hash computation
    required uint64 tx_count = 7;
}

message block_id {
    optional uint32 height = 1;
    
    // 32-bytes
    optional bytes hash = 2;
}

message output {
    required uint32 index = 1;
    required uint64 satoshis = 2;
    required bytes script = 3;
}

message filter {
    enum filters {
        ADDRESS = 1;
        TRANSACTION = 2;
        STEALTH = 3;
    }

    required filters filter_type = 1;
    optional uint32 bits = 2;
    required bytes prefix = 3;
}

message block_location {
    optional block_id identity = 1;
    repeated bytes branch = 2;
}

message tx_hash_result {
    required bytes hash = 1;
    required block_location location = 2;
}

message point {
    required bytes hash = 1;
    required uint32 index = 2;
}

message tx_input {
    required point previous_output = 1;
    required bytes script = 2;
    required uint32 sequence = 3;
}

message tx_output {
    required uint64 value = 1;
    required bytes script = 2;
}

message tx {
    required uint32 version = 1;
    required uint32 locktime = 2;
    repeated tx_input inputs = 3;
    repeated tx_output outputs = 4;
}

message tx_result {
    required tx transaction = 1;
    required block_location location = 2;
}

message utxo_result {
    required bytes tx_hash = 1;
    required block_location location = 2;
    repeated output outputs = 3;
}

message request {
    optional uint32 id = 1;

    message block_headers_request {
        optional block_id start = 1;
        optional uint32 results_per_page = 2;
    }
    
    optional block_headers_request get_block_headers = 2;
    
    message transactions_request {
        enum results {
            TX_HASH = 1;
            TX_RESULT = 2;
            UTXO_RESULT = 3;
        }
                
        enum locations {
            NONE = 0;
            BLOCK = 1;
            MERKLE = 2;
        }

        optional block_id start = 1;
        optional uint32 results_per_page = 2;
        repeated filter query = 3;
        optional results result_type = 4 [default = TX_HASH];
        optional locations location_type = 5 [default = NONE];
    }
    
    optional transactions_request get_transactions = 3;
    
    optional tx send_transaction = 4;
    
    optional tx validate_transaction = 5;
}

message response {
    // can encode both success/fail for broadcast operations and error codes
    // for other calls
    optional sint32 status = 2;
    
    // list response properties
    optional block_id next = 3;
    optional block_id top = 4;

    repeated block_header headers = 5;
    repeated tx_hash_result hashes = 6;
    repeated tx_result transactions = 7;
    repeated utxo_result utxos = 8;
}

message response_alternate {
    // can encode error codes for calls
    optional sint32 status = 2;

    message block_headers {
        optional block_id next = 1;
        optional block_id top = 2;
        repeated block_header headers = 3;
    }
    
    optional block_headers get_block_headers_response = 3;
    
    message transactions {
        optional block_id next = 1;
        optional block_id top = 2;
        repeated tx_hash_result hashes = 3;
        repeated tx_result transactions = 4;
        repeated utxo_result utxos = 5;
    }

    optional transactions get_transactions_response = 4;
    
    optional bool send_transaction_succeeded = 5;
    
    optional bool validate_transaction_succeeded = 6;
}

message stealth_message {
    optional uint32 id = 1;

    message block_headers_request {
        optional block_id start = 1;
        optional uint32 results_per_page = 2;
    }
    
    optional block_headers_request get_block_headers = 2;
    
    message transactions_request {
        enum results {
            TX_HASH = 1;
            TX_RESULT = 2;
            UTXO_RESULT = 3;
        }
                
        enum locations {
            NONE = 0;
            BLOCK = 1;
            MERKLE = 2;
        }

        optional block_id start = 1;
        optional uint32 results_per_page = 2;
        repeated filter query = 3;
        optional results result_type = 4 [default = TX_HASH];
        optional locations location_type = 5 [default = NONE];
    }
    
    optional transactions_request get_transactions = 3;
    
    optional tx send_transaction = 4;
    
    optional tx validate_transaction = 5;
    
    // can encode both success/fail for broadcast operations and error codes
    // for other calls
    optional sint32 status = 6;
    
    // list response properties
    optional block_id next = 7;
    optional block_id top = 8;

    repeated block_header headers = 9;
    repeated tx_hash_result hashes = 10;
    repeated tx_result transactions = 11;
    repeated utxo_result utxos = 12;
}
